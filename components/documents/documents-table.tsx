'use client';

import { format } from 'date-fns';
import { es } from 'date-fns/locale';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from '@/components/ui/dropdown-menu';
import { 
  HiOutlineDotsVertical, 
  HiOutlineChevronDown, 
  HiOutlineChevronRight, 
  HiOutlineDocumentDownload, 
  HiOutlineCheck, 
  HiOutlineClock, 
  HiOutlineX,
  HiOutlineDocumentAdd,
  HiOutlineRefresh
} from 'react-icons/hi';
import { Document, DocumentGroup } from '@/types/documents';
import { useState } from 'react';

interface DocumentsTableProps {
  data: DocumentGroup[];
  onDocumentSelect: (doc: Document) => void;
}

export function DocumentsTable({ data, onDocumentSelect }: DocumentsTableProps) {
  const [expandedGroups, setExpandedGroups] = useState<string[]>([]);

  const toggleGroup = (entryId: string) => {
    setExpandedGroups(prev =>
      prev.includes(entryId)
        ? prev.filter(id => id !== entryId)
        : [...prev, entryId]
    );
  };

  const getStatusConfig = (status: string) => {
    switch (status) {
      case 'pending':
        return {
          color: 'text-amber-600',
          bgColor: 'bg-amber-100 dark:bg-amber-500/20',
          icon: HiOutlineClock,
          label: 'Pendiente'
        };
      case 'generated':
        return {
          color: 'text-emerald-600',
          bgColor: 'bg-emerald-100 dark:bg-emerald-500/20',
          icon: HiOutlineCheck,
          label: 'Generado'
        };
      case 'signed':
        return {
          color: 'text-blue-600',
          bgColor: 'bg-blue-100 dark:bg-blue-500/20',
          icon: HiOutlineCheck,
          label: 'Firmado'
        };
      case 'rejected':
        return {
          color: 'text-rose-600',
          bgColor: 'bg-rose-100 dark:bg-rose-500/20',
          icon: HiOutlineX,
          label: 'Rechazado'
        };
      default:
        return {
          color: 'text-gray-600',
          bgColor: 'bg-gray-100',
          icon: HiOutlineClock,
          label: 'Desconocido'
        };
    }
  };

  const calculateProgress = (documents: Document[]) => {
    const total = documents.reduce((sum, doc) => sum + doc.checklist.required.length, 0);
    const completed = documents.reduce((sum, doc) => sum + doc.checklist.completed.length, 0);
    return Math.round((completed / total) * 100);
  };

  const canGenerateAutomatically = (type: string) => {
    return ['BOL', 'Packing List', 'Pedimento'].includes(type);
  };

  const handleGenerateDocument = (e: React.MouseEvent, doc: Document) => {
    e.stopPropagation();
    // Aquí iría la lógica para generar el documento
    console.log('Generando documento:', doc.type, doc.reference);
  };

  const handleRegenerateDocument = (e: React.MouseEvent, doc: Document) => {
    e.stopPropagation();
    // Aquí iría la lógica para regenerar el documento
    console.log('Regenerando documento:', doc.type, doc.reference);
  };

  return (
    <div className="flex flex-col">
      {/* Vista móvil */}
      <div className="space-y-4 sm:hidden">
        {data.map((group) => {
          const isExpanded = expandedGroups.includes(group.entryId);
          const progress = calculateProgress(group.documents);
          
          return (
            <Card key={group.entryId} className="overflow-hidden">
              <div
                className="flex cursor-pointer items-center justify-between border-b p-4"
                onClick={() => toggleGroup(group.entryId)}
              >
                <div>
                  <div className="flex items-center gap-2">
                    {isExpanded ? (
                      <HiOutlineChevronDown className="h-4 w-4" />
                    ) : (
                      <HiOutlineChevronRight className="h-4 w-4" />
                    )}
                    <span className="font-medium">{group.reference}</span>
                  </div>
                  <div className="mt-1 text-sm text-muted-foreground">
                    {group.client}
                  </div>
                </div>
                <div className="text-right">
                  <div className="text-sm">{format(group.date, "d MMM yyyy", { locale: es })}</div>
                  <div className="mt-1 text-sm text-muted-foreground">{group.transportType}</div>
                </div>
              </div>

              {isExpanded && (
                <div className="divide-y">
                  {group.documents.map((doc) => {
                    const status = getStatusConfig(doc.status);
                    const isAutoGenerated = canGenerateAutomatically(doc.type);

                    return (
                      <div
                        key={doc.id}
                        className="flex items-center justify-between p-4"
                        onClick={() => onDocumentSelect(doc)}
                      >
                        <div>
                          <div className="font-medium">{doc.type}</div>
                          <div className="mt-1 text-sm text-muted-foreground">{doc.reference}</div>
                        </div>
                        <div className="flex items-center gap-2">
                          <div className={`flex items-center gap-1.5 rounded-md px-2 py-1 text-sm ${status.bgColor} ${status.color}`}>
                            <status.icon className="h-4 w-4" />
                            <span>{status.label}</span>
                          </div>
                          {isAutoGenerated && doc.status === 'pending' && (
                            <Button
                              variant="outline"
                              size="icon"
                              className="h-8 w-8"
                              onClick={(e) => handleGenerateDocument(e, doc)}
                            >
                              <HiOutlineDocumentAdd className="h-4 w-4" />
                            </Button>
                          )}
                          {isAutoGenerated && doc.status !== 'pending' && (
                            <Button
                              variant="outline"
                              size="icon"
                              className="h-8 w-8"
                              onClick={(e) => handleRegenerateDocument(e, doc)}
                            >
                              <HiOutlineRefresh className="h-4 w-4" />
                            </Button>
                          )}
                          {doc.fileUrl && (
                            <Button
                              variant="ghost"
                              size="icon"
                              className="h-8 w-8"
                              onClick={(e) => {
                                e.stopPropagation();
                                window.open(doc.fileUrl, '_blank');
                              }}
                            >
                              <HiOutlineDocumentDownload className="h-4 w-4" />
                            </Button>
                          )}
                        </div>
                      </div>
                    );
                  })}
                </div>
              )}
            </Card>
          );
        })}
      </div>

      {/* Vista desktop */}
      <div className="hidden sm:block">
        <div className="rounded-lg border">
          <Table>
            <TableHeader>
              <TableRow className="bg-muted/50">
                <TableHead className="w-[30px]"></TableHead>
                <TableHead className="font-semibold">Referencia</TableHead>
                <TableHead className="font-semibold">Cliente</TableHead>
                <TableHead className="font-semibold">Fecha</TableHead>
                <TableHead className="font-semibold">Transporte</TableHead>
                <TableHead className="font-semibold">Progreso</TableHead>
                <TableHead className="w-[30px]"></TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {data.map((group) => {
                const isExpanded = expandedGroups.includes(group.entryId);
                const progress = calculateProgress(group.documents);

                return (
                  <>
                    <TableRow
                      key={group.entryId}
                      className="cursor-pointer hover:bg-muted/50"
                      onClick={() => toggleGroup(group.entryId)}
                    >
                      <TableCell className="w-[30px]">
                        {isExpanded ? (
                          <HiOutlineChevronDown className="h-4 w-4" />
                        ) : (
                          <HiOutlineChevronRight className="h-4 w-4" />
                        )}
                      </TableCell>
                      <TableCell>
                        <span className="font-medium">{group.reference}</span>
                      </TableCell>
                      <TableCell>{group.client}</TableCell>
                      <TableCell>
                        {format(group.date, "d 'de' MMMM, yyyy", { locale: es })}
                      </TableCell>
                      <TableCell>{group.transportType}</TableCell>
                      <TableCell>
                        <div className="flex items-center gap-3">
                          <div className="h-2 w-24 overflow-hidden rounded-full bg-muted">
                            <div
                              className="h-full bg-blue-500 transition-all"
                              style={{ width: `${progress}%` }}
                            />
                          </div>
                          <span className="text-sm tabular-nums text-muted-foreground">
                            {progress}%
                          </span>
                        </div>
                      </TableCell>
                      <TableCell className="w-[30px]"></TableCell>
                    </TableRow>

                    {isExpanded && (
                      <TableRow>
                        <TableCell colSpan={7} className="p-0">
                          <div className="divide-y border-t bg-muted/30">
                            {group.documents.map((doc) => {
                              const status = getStatusConfig(doc.status);
                              const isAutoGenerated = canGenerateAutomatically(doc.type);

                              return (
                                <div
                                  key={doc.id}
                                  className="flex cursor-pointer items-center justify-between px-4 py-3 hover:bg-muted/50"
                                  onClick={() => onDocumentSelect(doc)}
                                >
                                  <div className="flex items-center gap-6">
                                    <div className="w-[200px] pl-6">
                                      <div className="font-medium">{doc.type}</div>
                                      <div className="text-sm text-muted-foreground">
                                        {doc.reference}
                                      </div>
                                    </div>
                                    <div className={`flex items-center gap-1.5 rounded-md px-2 py-1 ${status.bgColor} ${status.color}`}>
                                      <status.icon className="h-4 w-4" />
                                      <span className="text-sm font-medium">{status.label}</span>
                                    </div>
                                  </div>
                                  <div className="flex items-center gap-2">
                                    {isAutoGenerated && doc.status === 'pending' && (
                                      <Button
                                        variant="outline"
                                        size="sm"
                                        className="h-8"
                                        onClick={(e) => handleGenerateDocument(e, doc)}
                                      >
                                        <HiOutlineDocumentAdd className="mr-2 h-4 w-4" />
                                        Generar
                                      </Button>
                                    )}
                                    {isAutoGenerated && doc.status !== 'pending' && (
                                      <Button
                                        variant="outline"
                                        size="sm"
                                        className="h-8"
                                        onClick={(e) => handleRegenerateDocument(e, doc)}
                                      >
                                        <HiOutlineRefresh className="mr-2 h-4 w-4" />
                                        Regenerar
                                      </Button>
                                    )}
                                    {doc.fileUrl && (
                                      <Button
                                        variant="ghost"
                                        size="icon"
                                        className="h-8 w-8"
                                        onClick={(e) => {
                                          e.stopPropagation();
                                          window.open(doc.fileUrl, '_blank');
                                        }}
                                      >
                                        <HiOutlineDocumentDownload className="h-4 w-4" />
                                      </Button>
                                    )}
                                    <DropdownMenu>
                                      <DropdownMenuTrigger asChild>
                                        <Button variant="ghost" size="icon" className="h-8 w-8">
                                          <HiOutlineDotsVertical className="h-4 w-4" />
                                        </Button>
                                      </DropdownMenuTrigger>
                                      <DropdownMenuContent align="end">
                                        <DropdownMenuItem onClick={() => onDocumentSelect(doc)}>
                                          Ver detalles
                                        </DropdownMenuItem>
                                      </DropdownMenuContent>
                                    </DropdownMenu>
                                  </div>
                                </div>
                              );
                            })}
                          </div>
                        </TableCell>
                      </TableRow>
                    )}
                  </>
                );
              })}
            </TableBody>
          </Table>
        </div>
      </div>
    </div>
  );
}